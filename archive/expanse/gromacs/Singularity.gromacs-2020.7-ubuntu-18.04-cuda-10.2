Bootstrap: oras
From: ghcr.io/mkandes/naked-singularity:ubuntu-18.04-cuda-10.2

%labels

    APPLICATION_NAME gromacs
    APPLICATION_VERSION 2020.7
    APPLICATION_URL http://www.gromacs.org

    IMAGE_URI oras://ghcr.io/mkandes/naked-singularity:gromacs-2020.7-ubuntu-18.04-cuda-10.2
    IMAGE_MD5 dc8e58c35ad94cfd3577c387ff639908
    IMAGE_SHA256 e0c15edf28ce974dd1b81b4c99b1290aea12dc314d0044f19c5ba15a8f1b7201

    AUTHOR_NAME Marty Kandes
    AUTHOR_EMAIL mkandes@sdsc.edu

    LAST_UPDATED 20220429

%setup

%environment

    # Set GROMACS version number, build type, root and installation
    # directories as well as its source repository URL
    export GROMACS_VERSION='2020.7'
    export GROMACS_BUILD='tmpi-cuda'
    export GROMACS_ROOT_DIR='/opt/gromacs'
    export GROMACS_INSTALL_DIR="${GROMACS_ROOT_DIR}/${GROMACS_VERSION}"
    export GROMACS_ROOT_URL='http://ftp.gromacs.org/pub'

    # Set GROMACS environment variables and path changes explicitly,
    # rather than sourcing the standard "${GROMACS_INSTALL_DIR}/bin/GMXRC"
    # configuration script from the %environment section, which does not 
    # work as might be expected.
    # https://github.com/apptainer/singularity/issues/734
    # https://github.com/apptainer/singularity/issues/3401
    export GMXBIN="${GROMACS_INSTALL_DIR}/bin"
    export GMXLDLIB="${GROMACS_INSTALL_DIR}/lib"
    export GMXDATA="${GROMACS_INSTALL_DIR}/share/gromacs"
    export GMXMAN="${GROMACS_INSTALL_DIR}/share/man"
    export MANPATH="${GMXMAN}"
    export PATH="${GMXBIN}:${PATH}"
    export LD_LIBRARY_PATH="${GMXLDLIB}:${LD_LIBRARY_PATH}"
    export PKG_CONFIG_PATH="${GMXLDLIB}/pkgconfig"
    export GROMACS_DIR="${GROMACS_INSTALL_DIR}"

%post -c /bin/bash

    # Set operating system mirror URL
    export MIRRORURL='http://us.archive.ubuntu.com/ubuntu'

    # Set operating system version
    export OSVERSION='bionic'

    # Set system locale
    export LC_ALL='C'

    # Set debian frontend interface
    export DEBIAN_FRONTEND='noninteractive'

    # Set NVIDIA driver and CUDA versions
    export NVIDIA_DRIVER_MAJOR='470'
    export NVIDIA_DRIVER_MINOR='57'
    export NVIDIA_DRIVER_REVISION='02'
    export NVIDIA_DRIVER_VERSION="${NVIDIA_DRIVER_MAJOR}.${NVIDIA_DRIVER_MINOR}.${NVIDIA_DRIVER_REVISION}"

    export CUDA_MAJOR='10'
    export CUDA_MINOR='2'
    export CUDA_REVISION='89'
    export CUDA_VERSION="${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_REVISION}"

    export CUDNN_MAJOR='8'
    export CUDNN_MINOR='2'
    export CUDNN_REVISION='4.15'
    export CUDNN_VERSION="${CUDNN_MAJOR}.${CUDNN_MINOR}.${CUDNN_REVISION}"

    export NCCL_MAJOR='2'
    export NCCL_MINOR='11'
    export NCCL_REVISION='4'
    export NCCL_VERSION="${NCCL_MAJOR}.${NCCL_MINOR}.${NCCL_REVISION}"

    export TENSORRT_MAJOR='8'
    export TENSORRT_MINOR='2'
    export TENSORRT_REVISION='4'
    export TENSORRT_VERSION="${TENSORRT_MAJOR}.${TENSORRT_MINOR}.${TENSORRT_REVISION}"

    export CUTENSOR_MAJOR='1'
    export CUTENSOR_MINOR='5'
    export CUTENSOR_REVISION='0.3'
    export CUTENSOR_VERSION="${CUTENSOR_MAJOR}.${CUTENSOR_MINOR}.${CUTENSOR_REVISION}"

    # Set paths to CUDA binaries and libraries
    export CUDA_HOME="/usr/local/cuda-${CUDA_MAJOR}.${CUDA_MINOR}"

    export CUDNN_INCLUDE='/usr/include'
    export CUDNN_LIB='/usr/lib/x86_64-linux-gnu'

    export NCCL_INCLUDE='/usr/include'
    export NCCL_LIB='/usr/lib/x86_64-linux-gnu'

    export TENSORRT_INCLUDE='/usr/include'
    export TENSORRT_LIB='/usr/lib/x86_64-linux-gnu'

    export CUTENSOR_INCLUDE='/usr/include'
    export CUTENSOR_LIB='/usr/lib/x86_64-linux-gnu'

    export PATH="${CUDA_HOME}/bin${PATH:+:${PATH}}"
    export LD_LIBRARY_PATH="${CUDA_HOME}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
    export LD_LIBRARY_PATH="${CUDNN_LIB}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${NCCL_LIB}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${TENSORRT_LIB}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${CUTENSOR_LIB}:${LD_LIBRARY_PATH}"

    # DO NOT Upgrade all software packages to their latest versions
    # apt-get -y update && apt-get -y upgrade

    # Set GROMACS version number, build type, root and installation 
    # directories as well as its source repository URL
    export GROMACS_VERSION='2020.7'
    export GROMACS_BUILD='tmpi-cuda'
    export GROMACS_ROOT_DIR='/opt/gromacs'
    export GROMACS_INSTALL_DIR="${GROMACS_ROOT_DIR}/${GROMACS_VERSION}"
    export GROMACS_ROOT_URL='http://ftp.gromacs.org/pub'

    cd /tmp

    # Download, build, and install GROMACS
    wget "${GROMACS_ROOT_URL}/gromacs/gromacs-${GROMACS_VERSION}.tar.gz"
    tar -xf "gromacs-${GROMACS_VERSION}.tar.gz"
    cd "gromacs-${GROMACS_VERSION}"
    mkdir -p build
    cd build
    cmake .. \
      -DCMAKE_C_COMPILER=gcc \
      -DCMAKE_CXX_COMPILER=g++ \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX="${GROMACS_INSTALL_DIR}" \
      -DGMX_PREFER_STATIC_LIBS=ON \
      -DBUILD_SHARED_LIBS=OFF \
      -DGMX_EXTERNAL_BLAS=OFF \
      -DGMX_EXTERNAL_BOOST=OFF \
      -DGMX_EXTERNAL_LAPACK=OFF \
      -DGMX_FFT_LIBRARY=fftw3 \
      -DGMX_BUILD_OWN_FFTW=ON \
      -DGMX_DOUBLE=OFF \
      -DGMX_SIMD=AVX_512 \
      -DGMX_MPI=OFF \
      -DGMX_OPENMP=OFF \
      -DGMX_GPU=ON \
      -DGMX_CUDA_TARGET_COMPUTE='70' \
      -DGMX_CUDA_TARGET_SM='70' \
      -DREGRESSIONTEST_DOWNLOAD=OFF
    make
    make install

    cd /tmp

    # Remove GROMACS build directories and source tarball
    rm -rf "gromacs-${GROMACS_VERSION}"
    rm "gromacs-${GROMACS_VERSION}.tar.gz"

    # Cleanup
    apt-get -y autoremove --purge
    apt-get -y clean

    # Update database for mlocate
    updatedb

%files

%runscript

%test
