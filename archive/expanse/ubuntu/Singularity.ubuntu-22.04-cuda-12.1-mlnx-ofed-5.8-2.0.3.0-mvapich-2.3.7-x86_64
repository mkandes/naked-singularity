Bootstrap: oras
From: ghcr.io/mkandes/ubuntu:22.04-cuda-12.1-mlnx-ofed-5.8-2.0.3.0-x86_64-2024-01-29

%labels

    org.opencontainers.image.ref.name ghcr.io/mkandes/ubuntu:22.04-cuda-12.1-mlnx-ofed-5.8-2.0.3.0-mvapich-2.3.7-x86_64-2024-01-31

    org.opencontainers.image.base.name ghcr.io/mkandes/ubuntu:22.04-cuda-12.1-mlnx-ofed-5.8-2.0.3.0-x86_64-2024-01-29
    org.opencontainers.image.base.digest sha256:be13ce06c595381baf6f7766adf0c19f18e299156c360ab3050caeecf36130ea

    org.opencontainers.image.title mvapich
    org.opencontainers.image.description MVAPICH2 is an open source implementation of Message Passing Interface (MPI)
    org.opencontainers.image.url https://mvapich.cse.ohio-state.edu
    org.opencontainers.image.documentation https://mvapich.cse.ohio-state.edu/static/media/mvapich/mvapich2-userguide.html
    org.opencontainers.image.source https://mvapich.cse.ohio-state.edu/download/mvapich/mv2/mvapich2-2.3.7-1.tar.gz
    org.opencontainers.image.vendor Network-Based Computing Laboratory (NBCL), Ohio State Univeristy
    org.opencontainers.image.licenses https://mvapich.cse.ohio-state.edu/static/media/mvapich/LICENSE-MV2.TXT
    org.opencontainers.image.version 2.3.7
    org.opencontainers.image.revision

    org.opencontainers.image.authors Marty Kandes (mkandes@sdsc.edu)

%setup

%environment

    # Set MVAPICH major, minor, and revision numbers, root and
    # installation directories
    export MV2_MAJOR='2'
    export MV2_MINOR='3'
    export MV2_REVISION='7'
    export MV2_VERSION="${MV2_MAJOR}.${MV2_MINOR}.${MV2_REVISION}"
    export MV2_ROOT_DIR='/opt/mvapich'
    export MV2_INSTALL_DIR="${MV2_ROOT_DIR}/${MV2_VERSION}"

    # Set paths to MVAPICH binaries and libraries
    export PATH="${MV2_INSTALL_DIR}/bin:${PATH}"
    export LD_LIBRARY_PATH="${MV2_INSTALL_DIR}/lib:${LD_LIBRARY_PATH}"

%post -c /bin/bash

    # Set operating system mirror URL
    export MIRRORURL='http://us.archive.ubuntu.com/ubuntu'

    # Set operating system version
    export OSVERSION='jammy'

    # Set system locale
    export LC_ALL=C

    # Set debian frontend interface
    export DEBIAN_FRONTEND='noninteractive'

    # Set NVIDIA driver and CUDA version numbers
    export NVIDIA_DRIVER_MAJOR='525'
    export NVIDIA_DRIVER_MINOR='85'
    export NVIDIA_DRIVER_REVISION='12'
    export NVIDIA_DRIVER_VERSION="${NVIDIA_DRIVER_MAJOR}.${NVIDIA_DRIVER_MINOR}.${NVIDIA_DRIVER_REVISION}"

    export CUDA_MAJOR='12'
    export CUDA_MINOR='1'
    export CUDA_REVISION='1'
    export CUDA_VERSION="${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_REVISION}"

    export CUDNN_MAJOR='8'
    export CUDNN_MINOR='9'
    export CUDNN_REVISION='0.131'
    export CUDNN_VERSION="${CUDNN_MAJOR}.${CUDNN_MINOR}.${CUDNN_REVISION}"

    export NCCL_MAJOR='2'
    export NCCL_MINOR='18'
    export NCCL_REVISION='3'
    export NCCL_VERSION="${NCCL_MAJOR}.${NCCL_MINOR}.${NCCL_REVISION}"

    export TENSORRT_MAJOR='8'
    export TENSORRT_MINOR='6'
    export TENSORRT_REVISION='1.6'
    export TENSORRT_VERSION="${TENSORRT_MAJOR}.${TENSORRT_MINOR}.${TENSORRT_REVISION}"

    export CUTENSOR_MAJOR='2'
    export CUTENSOR_MINOR='0'
    export CUTENSOR_REVISION='0.7'
    export CUTENSOR_VERSION="${CUTENSOR_MAJOR}.${CUTENSOR_MINOR}.${CUTENSOR_REVISION}"

    export CUSPARSELT_MAJOR='0'
    export CUSPARSELT_MINOR='5'
    export CUSPARSELT_REVISION='2.1'
    export CUSPARSELT_VERSION="${CUSPARSELT_MAJOR}.${CUSPARSELT_MINOR}.${CUSPARSELT_REVISION}"

    # Set paths to CUDA binaries and libraries
    export CUDA_HOME="/usr/local/cuda-${CUDA_MAJOR}.${CUDA_MINOR}"

    export CUDNN_INCLUDE_DIR='/usr/include'
    export CUDNN_LIB_DIR='/usr/lib/x86_64-linux-gnu'

    export NCCL_INCLUDE_DIR='/usr/include'
    export NCCL_LIB_DIR='/usr/lib/x86_64-linux-gnu'

    export TENSORRT_INCLUDE='/usr/include'
    export TENSORRT_LIB='/usr/lib/x86_64-linux-gnu'

    export CUTENSOR_INCLUDE_DIR='/usr/include'
    export CUTENSOR_LIB_DIR='/usr/lib/x86_64-linux-gnu'

    export CUSPARSELT_INCLUDE_DIR='/usr/include'
    export CUSPARSELT_LIB_DIR='/usr/lib/x86_64-linux-gnu'

    export PATH="${CUDA_HOME}/bin${PATH:+:${PATH}}"
    export LD_LIBRARY_PATH="${CUDA_HOME}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
    export LD_LIBRARY_PATH="${CUDNN_LIB_DIR}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${NCCL_LIB_DIR}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${TENSORRT_LIB}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${CUTENSOR_LIB_DIR}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${CUSPARSELT_LIB_DIR}:${LD_LIBRARY_PATH}"

    # DO NOT Upgrade all software packages to their latest versions
    # apt-get -y update && apt-get -y upgrade

    # Set MVAPICH major, minor, and revision numbers, root and
    # installation directories
    export MV2_ROOT_URL='http://mvapich.cse.ohio-state.edu/download/mvapich/mv2'
    export MV2_MAJOR='2'
    export MV2_MINOR='3'
    export MV2_REVISION='7'
    export MV2_VERSION="${MV2_MAJOR}.${MV2_MINOR}.${MV2_REVISION}"
    export MV2_ROOT_DIR='/opt/mvapich'
    export MV2_INSTALL_DIR="${MV2_ROOT_DIR}/${MV2_VERSION}"

    cd /tmp

    # Download, build, and install MVAPICH
    wget "${MV2_ROOT_URL}/mvapich2-${MV2_VERSION}.tar.gz"
    tar -xf "mvapich2-${MV2_VERSION}.tar.gz"
    cd "mvapich2-${MV2_VERSION}"
    export FFLAGS='-fallow-argument-mismatch'
    ./configure --prefix="${MV2_INSTALL_DIR}" --enable-cuda --with-cuda="${CUDA_HOME}" --with-cuda-include="${CUDA_HOME}/include" --with-cuda-libpath="${CUDA_HOME}/lib64" --enable-fast=all --with-hwloc=v2
    make -j4
    make install

    cd /tmp

    # Remove MVAPICH build directory and source tarball
    rm -rf "mvapich2-${MV2_VERSION}"
    rm "mvapich2-${MV2_VERSION}.tar.gz"

    # Store information about the CPU arch of the build system
    lscpu > /.singularity.d/lscpu.txt

    # Cleanup
    apt-get -y autoremove --purge
    apt-get -y clean

    # Update database for mlocate
    updatedb

%files

%runscript

%test
