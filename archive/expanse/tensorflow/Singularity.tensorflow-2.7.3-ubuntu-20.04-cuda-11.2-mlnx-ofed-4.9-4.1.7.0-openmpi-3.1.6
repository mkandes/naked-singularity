Bootstrap: oras
From: ghcr.io/mkandes/naked-singularity:ubuntu-20.04-cuda-11.2-mlnx-ofed-4.9-4.1.7.0-openmpi-3.1.6

%labels

    APPLICATION_NAME tensorflow
    APPLICATION_VERSION 2.7.3
    APPLICATION_URL https://www.tensorflow.org

    IMAGE_URI ghcr.io/mkandes/naked-singularity:tensorflow-2.7.3-ubuntu-20.04-cuda-11.2-mlnx-ofed-4.9-4.1.7.0-openmpi-3.1.6
    IMAGE_MD5 f390d372308a1bfe59100601e7cc972b
    IMAGE_SHA256 da30ed9f65e05b6631c6d1c2d9ae6d72fcd552d2a75291df360144312ddd5a57

    AUTHOR_NAME Marty Kandes
    AUTHOR_EMAIL mkandes@sdsc.edu

    LAST_UPDATED 20220523

%setup

%environment

%post -c /bin/bash

    # Set operating system mirror URL
    export MIRRORURL='http://us.archive.ubuntu.com/ubuntu'

    # Set operating system version
    export OSVERSION='focal'

    # Set system locale
    export LC_ALL='C'

    # Set debian frontend interface
    export DEBIAN_FRONTEND='noninteractive'

    # Set NVIDIA driver and CUDA versions
    export NVIDIA_DRIVER_MAJOR='510'
    export NVIDIA_DRIVER_MINOR='39'
    export NVIDIA_DRIVER_REVISION='01'
    export NVIDIA_DRIVER_VERSION="${NVIDIA_DRIVER_MAJOR}.${NVIDIA_DRIVER_MINOR}.${NVIDIA_DRIVER_REVISION}"

    export CUDA_MAJOR='11'
    export CUDA_MINOR='2'
    export CUDA_REVISION='2'
    export CUDA_VERSION="${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_REVISION}"

    export CUDNN_MAJOR='8'
    export CUDNN_MINOR='1'
    export CUDNN_REVISION='1.33'
    export CUDNN_VERSION="${CUDNN_MAJOR}.${CUDNN_MINOR}.${CUDNN_REVISION}"

    export NCCL_MAJOR='2'
    export NCCL_MINOR='8'
    export NCCL_REVISION='4'
    export NCCL_VERSION="${NCCL_MAJOR}.${NCCL_MINOR}.${NCCL_REVISION}"

    export TENSORRT_MAJOR=''
    export TENSORRT_MINOR=''
    export TENSORRT_REVISION=''
    export TENSORRT_VERSION="${TENSORRT_MAJOR}.${TENSORRT_MINOR}.${TENSORRT_REVISION}"

    export CUTENSOR_MAJOR='1'
    export CUTENSOR_MINOR='3'
    export CUTENSOR_REVISION='3.2'
    export CUTENSOR_VERSION="${CUTENSOR_MAJOR}.${CUTENSOR_MINOR}.${CUTENSOR_REVISION}"

    # Set paths to CUDA binaries and libraries
    export CUDA_HOME="/usr/local/cuda-${CUDA_MAJOR}.${CUDA_MINOR}"

    export CUDNN_INCLUDE='/usr/include'
    export CUDNN_LIB='/usr/lib/x86_64-linux-gnu'

    export NCCL_INCLUDE='/usr/include'
    export NCCL_LIB='/usr/lib/x86_64-linux-gnu'

    export TENSORRT_INCLUDE='/usr/include'
    export TENSORRT_LIB='/usr/lib/x86_64-linux-gnu'

    export CUTENSOR_INCLUDE='/usr/include'
    export CUTENSOR_LIB='/usr/lib/x86_64-linux-gnu'

    export PATH="${CUDA_HOME}/bin${PATH:+:${PATH}}"
    export LD_LIBRARY_PATH="${CUDA_HOME}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
    export LD_LIBRARY_PATH="${CUDNN_LIB}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${NCCL_LIB}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${TENSORRT_LIB}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${CUTENSOR_LIB}:${LD_LIBRARY_PATH}"

    # Set Mellanox OFED version, operating system, and hardware platform
    export MLNX_ROOT_URL='http://www.mellanox.com/downloads/ofed'
    export MLNX_OFED_VERSION='4.9-4.1.7.0'
    export MLNX_OS_VERSION='ubuntu20.04'
    export MLNX_PLATFORM='x86_64'

    # Set OpenMPI major, minor, and revision numbers, root and
    # installation directories
    export OMPI_ROOT_URL='https://download.open-mpi.org/release/open-mpi'
    export OMPI_MAJOR='3'
    export OMPI_MINOR='1'
    export OMPI_REVISION='6'
    export OMPI_VERSION="${OMPI_MAJOR}.${OMPI_MINOR}.${OMPI_REVISION}"
    export OMPI_ROOT_DIR='/opt/openmpi'
    export OMPI_INSTALL_DIR="${OMPI_ROOT_DIR}/${OMPI_VERSION}"

    # Set paths to OpenMPI binaries and libraries
    export PATH="${OMPI_INSTALL_DIR}/bin:${PATH}"
    export LD_LIBRARY_PATH="${OMPI_INSTALL_DIR}/lib:${LD_LIBRARY_PATH}"

    # DO NOT Upgrade all packages to their latest versions
    # apt-get -y update && apt-get -y upgrade

    cd /tmp

    # Install Python and the TensorFlow package dependencies
    # https://www.tensorflow.org/install/source#linux
    apt-get -y install python3-dev
    apt-get -y install python3-testresources

    wget https://bootstrap.pypa.io/get-pip.py
    python3 get-pip.py

    pip3 install numpy 
    pip3 install wheel
    pip3 install packaging

    # Install Bazel dependencies and prerequisites
    apt-get -y install g++
    apt-get -y install unzip
    apt-get -y install zip
    apt-get -y install git
    apt-get -y install git-lfs
    apt-get -y install openjdk-11-jdk

    cd /tmp

    # Set Bazel version number
    export BAZEL_VERSION='3.7.2'

    # Download, build, and install Bazel
    mkdir -p "bazel/${BAZEL_VERSION}"
    cd "bazel/${BAZEL_VERSION}"
    wget "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-dist.zip"
    unzip -o "bazel-${BAZEL_VERSION}-dist.zip"
    export EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk"
    rm /usr/bin/python
    ln -s /usr/bin/python3 /usr/bin/python
    ./compile.sh

    # Set path to Bazel
    export PATH="/tmp/bazel/${BAZEL_VERSION}/output:${PATH}"

    # Install common mathematical and scientific python3 packages
    pip3 install scipy
    pip3 install pandas
    pip3 install scikit-learn
    pip3 install scikit-image
    pip3 install scikit-optimize
    pip3 install statsmodels
    pip3 install matplotlib
    pip3 install plotly
    pip3 install seaborn
    pip3 install astropy
    pip3 install biopython
    pip3 install h5py
    pip3 install nltk
    pip3 install sympy
    pip3 install netcdf4

    # Install JupyterLab
    pip3 install jupyter
    pip3 install jupyterlab

    # Install mpi4py
    pip3 install mpi4py==3.0.3

    # Install additional dependencies for TensorFlow
    pip3 install six
    pip3 install wheel
    pip3 install mock
    pip3 install future

    pip3 install keras_preprocessing --no-deps

    cd /tmp

    # Set TensorFlow version number
    export TENSORFLOW_VERSION='2.7.3'

    # Download, build, and install TensorFlow
    # https://www.tensorflow.org/install/source#linux
    git clone https://github.com/tensorflow/tensorflow.git
    cd tensorflow
    git checkout "v${TENSORFLOW_VERSION}"

    export PYTHON_BIN_PATH='/usr/bin/python3'
    export PYTHON_LIB_PATH='/usr/local/lib/python3.8/dist-packages'
    export TF_ENABLE_XLA=1
    export TF_NEED_OPENCL_SYCL=0
    export TF_NEED_ROCM=0
    export TF_NEED_CUDA=1
    export TF_NEED_TENSORRT=0
    export TF_CUDA_COMPUTE_CAPABILITIES='7.0'
    export TF_CUDA_CLANG=0
    export TF_NEED_MPI=1
    export MPI_HOME="${OMPI_INSTALL_DIR}"
    export CC_OPT_FLAGS='-mtune=generic'
    export TF_SET_ANDROID_WORKSPACE=0

    bazel build --local_ram_resources 8192 --local_cpu_resources 4 -c opt --config=cuda --config=numa --config=v2 --verbose_failures //tensorflow/tools/pip_package:build_pip_package
    bazel-bin/tensorflow/tools/pip_package/build_pip_package tensorflow_pkg
    pip3 install "tensorflow_pkg/tensorflow-${TENSORFLOW_VERSION}-cp38-cp38-linux_x86_64.whl"

    cd /tmp

    # Set Horovod version number
    export HOROVOD_VERSION='0.23.0'

    # Download, build, and install Horovod with TensorFlow + NVIDIA GPU support 
    git clone --recursive https://github.com/horovod/horovod.git
    cd horovod
    git checkout "v${HOROVOD_VERSION}"

    export HOROVOD_WITHOUT_PYTORCH=1
    export HOROVOD_WITHOUT_MXNET=1
    export HOROVOD_WITH_TENSORFLOW=1
    export HOROVOD_WITH_MPI=1
    export HOROVOD_WITH_GLOO=1
    export HOROVOD_GPU='CUDA'
    export HOROVOD_CUDA_HOME="${CUDA_HOME}"
    export HOROVOD_BUILD_CUDA_CC_LIST='70'
    export HOROVOD_GPU_OPERATIONS='NCCL'
    export HOROVOD_NCCL_INCLUDE="${NCCL_INCLUDE}"
    export HOROVOD_NCCL_LIB="${NCCL_LIB}"

    python3 setup.py clean
    python3 setup.py sdist
    ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs 
    pip3 install dist/horovod-*.tar.gz
    ldconfig

    # Uninstall newer version of tensorboard (unintentionally?) installed
    # by default with TensorFlow 2.7.3 and reinstall correct(?) version
    pip3 uninstall -y tensorboard
    pip3 install tensorboard==2.7.0
    pip3 install tensorboard-plugin-profile==2.7.0

    # Install TensorFlow tools, extentions, and related packages.
    pip3 install tensorflow-datasets==4.5.2
    pip3 install tensorflow-hub==0.12.0
    pip3 install tensorflow-model-optimization==0.7.2
    pip3 install tensorflow-probability==0.15.0
    pip3 install tensorflow-text==2.7.0
    pip3 install tensorflow-lattice==2.0.10
    pip3 install tensorflow-addons==0.15.0

    # Intall Keras Tuner
    pip3 install keras-tuner==1.1.0 

    cd /tmp

    # Install tf2onnx
    git clone https://github.com/onnx/tensorflow-onnx
    cd tensorflow-onnx
    git checkout v1.9.3 
    python3 setup.py install


    # Cleanup
    apt-get -y autoremove --purge
    apt-get -y clean

    # Update database for mlocate
    updatedb

%files

%runscript

%test
