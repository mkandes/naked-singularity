Bootstrap: shub
From: mkandes/naked-singularity:ubuntu-18.04-cuda-10.1.168-openmpi-3.1.4

%labels

    APPLICATION_NAME tensorflow
    APPLICATION_VERSION 2.3.0
    APPLICATION_URL https://www.tensorflow.org

    AUTHOR_NAME Marty Kandes
    AUTHOR_EMAIL mkandes@sdsc.edu

    LAST_UPDATED 20210611

%setup

%environment

    # Set paths to CUDA binaries and libraries
    export CUDA_VERSION='10.1'
    export CUDA_HOME="/usr/local/cuda-${CUDA_VERSION}"
    export PATH="${CUDA_HOME}/bin${PATH:+:${PATH}}"
    export LD_LIBRARY_PATH="${CUDA_HOME}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"

    # Set paths to OpenMPI binaries and libraries
    export OPENMPI_VERSION='3.1.4'
    export OPENMPI_ROOT_DIR="/opt/openmpi-${OPENMPI_VERSION}"
    export OPENMPI_INSTALL_DIR="${OPENMPI_ROOT_DIR}"
    export PATH="${OPENMPI_INSTALL_DIR}/bin:${PATH}"
    export LD_LIBRARY_PATH="${OPENMPI_INSTALL_DIR}/lib:${LD_LIBRARY_PATH}"

    # Set path to Bazel binary and libraries
    export BAZEL_VERSION='3.5.0'
    export BAZEL_ROOT_DIR='/opt/bazel'
    export BAZEL_INSTALL_DIR="${BAZEL_ROOT_DIR}/${BAZEL_VERSION}"
    export PATH="${BAZEL_INSTALL_DIR}/output:${PATH}"

    # Set TensorFlow version number, root and install directories
    export TENSORFLOW_VERSION='2.3.0'
    export TENSORFLOW_ROOT_DIR='/opt/tensorflow'
    export TENSORFLOW_INSTALL_DIR="${TENSORFLOW_ROOT_DIR}/${TENSORFLOW_VERSION}"

    export PYTHONPATH="${TENSORFLOW_INSTALL_DIR}/models:${PYTHONPATH}"

%post -c /bin/bash

    # Set operating system mirror URL
    export MIRRORURL='http://us.archive.ubuntu.com/ubuntu'

    # Set operating system version
    export OSVERSION='bionic'

    # Set system locale
    export LC_ALL='C'

    # Set debian frontend interface
    export DEBIAN_FRONTEND='noninteractive'

    # Set paths to CUDA binaries and libraries
    export CUDA_VERSION='10.1'
    export CUDA_HOME="/usr/local/cuda-${CUDA_VERSION}"
    export PATH="${CUDA_HOME}/bin${PATH:+:${PATH}}"
    export LD_LIBRARY_PATH="${CUDA_HOME}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"

    # Set paths to OpenMPI binaries and libraries
    export OPENMPI_VERSION='3.1.4'
    export OPENMPI_ROOT_DIR="/opt/openmpi-${OPENMPI_VERSION}"
    export OPENMPI_INSTALL_DIR="${OPENMPI_ROOT_DIR}"
    export PATH="${OPENMPI_INSTALL_DIR}/bin:${PATH}"
    export LD_LIBRARY_PATH="${OPENMPI_INSTALL_DIR}/lib:${LD_LIBRARY_PATH}"

    # Upgrade all packages to their latest versions
    apt-get -y update && apt-get -y upgrade

    # Install python3 and some common core packages 
    apt-get -y install python3-dev
    apt-get -y install python3-pip
    apt-get -y install python3-setuptools
    apt-get -y install python3-virtualenv
    apt-get -y install virtualenv

    # Install Bazel dependencies and prerequisites
    apt-get -y install g++
    apt-get -y install unzip
    apt-get -y install zip
    apt-get -y install git
    apt-get -y install openjdk-11-jdk

    # Set Bazel version number, root and installation directories
    export BAZEL_VERSION='3.5.0'
    export BAZEL_ROOT_DIR='/opt/bazel'
    export BAZEL_INSTALL_DIR="${BAZEL_ROOT_DIR}/${BAZEL_VERSION}"
    
    # Download, build, and install Bazel
    mkdir -p "${BAZEL_INSTALL_DIR}"
    cd "${BAZEL_INSTALL_DIR}"
    wget "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-dist.zip"
    unzip -o "bazel-${BAZEL_VERSION}-dist.zip"
    export EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk"
    rm /usr/bin/python
    ln -s /usr/bin/python3 /usr/bin/python
    ./compile.sh

    # Set path to Bazel
    export PATH="${BAZEL_INSTALL_DIR}/output:${PATH}"

    # Install common mathematical and scientific python3 packages
    apt-get -y install python3-numpy
    apt-get -y install python3-scipy
    apt-get -y install python3-pandas
    apt-get -y install python3-sklearn
    apt-get -y install python3-skimage
    apt-get -y install python3-statsmodels
    apt-get -y install python3-matplotlib
    apt-get -y install python3-plotly
    apt-get -y install python3-seaborn
    apt-get -y install python3-opencv
    apt-get -y install python3-astropy
    apt-get -y install python3-biopython
    apt-get -y install python3-h5py
    apt-get -y install python3-nltk
    apt-get -y install python3-sympy
    apt-get -y install python3-netcdf4

    # Install JupyterLab
    apt-get -y install jupyter
    pip3 install jupyterlab

    # Install additioanl dependencies for TensorFlow
    apt-get -y install python3-six
    apt-get -y install python3-wheel
    apt-get -y install python3-mock
    apt-get -y install python3-future

    pip3 install keras_applications --no-deps
    pip3 install keras_preprocessing --no-deps

    # Set TensorFlow version number, root and install directories
    export TENSORFLOW_VERSION='2.3.0'
    export TENSORFLOW_ROOT_DIR='/opt/tensorflow'
    export TENSORFLOW_INSTALL_DIR="${TENSORFLOW_ROOT_DIR}/${TENSORFLOW_VERSION}"

    # Download, build, and install TensorFlow
    mkdir -p "${TENSORFLOW_INSTALL_DIR}"
    cd "${TENSORFLOW_INSTALL_DIR}"
    git clone https://github.com/tensorflow/tensorflow.git
    cd tensorflow
    git checkout "v${TENSORFLOW_VERSION}"

    export PYTHON_BIN_PATH='/usr/bin/python3'
    export PYTHON_LIB_PATH='/usr/local/lib/python3.6/dist-packages'
    export TF_ENABLE_XLA=1
    export TF_NEED_OPENCL_SYCL=0
    export TF_NEED_ROCM=0
    export TF_NEED_CUDA=1
    export TF_NEED_TENSORRT=0
    #export TF_CUDA_COMPUTE_CAPABILITIES='3.5,3.7,5.2,6.0,6.1,7.0,7.5'
    export TF_CUDA_COMPUTE_CAPABILITIES='3.7,6.0,7.0'
    export TF_CUDA_CLANG=0
    export TF_NEED_MPI=1
    export MPI_HOME="${OPENMPI_INSTALL_DIR}"
    export CC_OPT_FLAGS='-mtune=generic'
    export TF_SET_ANDROID_WORKSPACE=0

    #bazel build --local_ram_resources 2048 --local_cpu_resources 1 -c opt --config=cuda --config=numa --config=v2 --verbose_failures //tensorflow/tools/pip_package:build_pip_package
    bazel build -c opt --config=cuda --config=numa --config=v2 --verbose_failures //tensorflow/tools/pip_package:build_pip_package
    bazel-bin/tensorflow/tools/pip_package/build_pip_package tensorflow_pkg
    pip3 install tensorflow_pkg/tensorflow-2.3.0-cp36-cp36m-linux_x86_64.whl

    cd "${TENSORFLOW_INSTALL_DIR}"

    # Download, build and install TensorFlow Addons
    git clone https://github.com/tensorflow/addons.git
    cd addons
    git checkout v0.11.2

    export TF_NEED_CUDA=1
    export TF_CUDA_VERSION="${CUDA_VERSION}"
    export TF_CUDNN_VERSION=7
    export CUDA_TOOLKIT_PATH="${CUDA_HOME}"
    export CUDNN_INSTALL_PATH='/usr/lib/x86_64-linux-gnu'

    python3 ./configure.py

    rm /usr/bin/python
    ln -s /usr/bin/python3 /usr/bin/python

    bazel build --enable_runfiles build_pip_pkg
    bazel-bin/build_pip_pkg artifacts
    pip3 install artifacts/tensorflow_addons-*.whl

    cd "${TENSORFLOW_INSTALL_DIR}"

    # Download and install TensorFlow Models
    git clone https://github.com/tensorflow/models.git
    cd models
    git checkout "v${TENSORFLOW_VERSION}"
    export PYTHONPATH="${TENSORFLOW_INSTALL_DIR}/models:${PYTHONPATH}"
    sed -i 's/kaggle>=1.3.9/#kaggle>=1.3.9/' official/requirements.txt
    pip3 install scikit-build
    pip3 install -r official/requirements.txt

    cd "${TENSORFLOW_INSTALL_DIR}"

    # Download, build, and install TensorFlow Probability library 
    git clone https://github.com/tensorflow/probability.git
    cd probability
    git checkout v0.11.0
    bazel build --copt=-O3 --copt=-march=native :pip_pkg
    ./bazel-bin/pip_pkg probability
    pip3 install probability/tfp*.whl

    cd "${TENSORFLOW_INSTALL_DIR}"

    # Attempt to download and install TensorFlow Profiler
    git clone https://github.com/tensorflow/profiler.git
    mkdir profile_env
    #python3 profiler/install_and_run.py --envdir=profile_env --logdir=profiler/demo

    # Cleanup
    apt-get -y autoremove --purge
    apt-get -y clean

    # Update database for mlocate
    updatedb

%files

%runscript

%test
