Bootstrap: oras
From: ghcr.io/mkandes/naked-singularity:ubuntu-18.04-mlnx-ofed-5.8-2.0.3.0-openmpi-4.1.3

%labels

    APPLICATION_NAME VisIt
    APPLICATION_VERSION 3.1.4
    APPLICATION_URL https://visit-dav.github.io/visit-website

    IMAGE_URI oras://ghcr.io/mkandes/naked-singularity:visit-3.1.4-ubuntu-18.04-mlnx-ofed-5.8-2.0.3.0-openmpi-4.1.3
    IMAGE_MD5
    IMAGE_SHA256

    AUTHOR_NAME Marty Kandes
    AUTHOR_EMAIL mkandes@sdsc.edu

    LAST_UPDATED 20230622

%setup

%environment

    # Set VisIt version number, root and install directories
    export VISIT_MAJOR='3'
    export VISIT_MINOR='1'
    export VISIT_REVISION='4'
    export VISIT_VERSION="${VISIT_MAJOR}.${VISIT_MINOR}.${VISIT_REVISION}"
    export VISIT_ROOT_DIR='/opt/visit'
    export VISIT_INSTALL_DIR="${VISIT_ROOT_DIR}/${VISIT_VERSION}"

    # Set path to VisIt binaries
    export PATH="${VISIT_INSTALL_DIR}/bin:${PATH}"

%post -c /bin/bash

    # Set operating system mirror URL
    export MIRRORURL='http://us.archive.ubuntu.com/ubuntu'

    # Set operating system version
    export OSVERSION='bionic'

    # Set system locale
    export LC_ALL='C'

    # Set debian frontend interface
    export DEBIAN_FRONTEND='noninteractive'

    # Set UCX major, minor, and revision numbers, root and installation
    # directories
    export UCX_MAJOR='1'
    export UCX_MINOR='10'
    export UCX_REVISION='1'
    export UCX_VERSION="${UCX_MAJOR}.${UCX_MINOR}.${UCX_REVISION}"
    export UCX_ROOT_DIR='/opt/ucx'
    export UCX_INSTALL_DIR="${UCX_ROOT_DIR}/${UCX_VERSION}"

    # Set paths to UCX binaries and libraries
    export PATH="${UCX_INSTALL_DIR}/bin:${PATH}"
    export LD_LIBRARY_PATH="${UCX_INSTALL_DIR}/lib:${LD_LIBRARY_PATH}"

    # Set OpenMPI major, minor, and revision numbers, root and
    # installation directories
    export OMPI_ROOT_URL='https://download.open-mpi.org/release/open-mpi'
    export OMPI_MAJOR='4'
    export OMPI_MINOR='1'
    export OMPI_REVISION='3'
    export OMPI_VERSION="${OMPI_MAJOR}.${OMPI_MINOR}.${OMPI_REVISION}"
    export OMPI_ROOT_DIR='/opt/openmpi'
    export OMPI_INSTALL_DIR="${OMPI_ROOT_DIR}/${OMPI_VERSION}"

    # Set paths to OpenMPI binaries and libraries
    export PATH="${OMPI_INSTALL_DIR}/bin:${PATH}"
    export LD_LIBRARY_PATH="${OMPI_INSTALL_DIR}/lib:${LD_LIBRARY_PATH}"

    # Upgrade all software packages to their latest versions
    apt-get -y update && apt-get -y upgrade

    cd /tmp

    # Set VisIt version number, root and install directories
    export VISIT_MAJOR='3'
    export VISIT_MINOR='1'
    export VISIT_REVISION='4'
    export VISIT_VERSION="${VISIT_MAJOR}.${VISIT_MINOR}.${VISIT_REVISION}"
    export VISIT_ROOT_DIR='/opt/visit'
    export VISIT_INSTALL_DIR="${VISIT_ROOT_DIR}/${VISIT_VERSION}"
    export VISIT_REPO_URL='https://github.com/visit-dav/visit'

    # Install dependencies and prerequisites for VisIt
    apt-get -y install libffi-dev
    apt-get -y install libx11-xcb-dev
    apt-get -y install libx11-xcb1
    apt-get -y install libxcb-dri2-0-dev
    apt-get -y install libxcb-dri2-0
    apt-get -y install libxcb-xfixes0-dev
    apt-get -y install libxcb-xfixes0
    apt-get -y install python
    apt-get -y install python-dev
    apt-get -y install python-pip
    apt-get -y install python-setuptools
    apt-get -y install python-wheel
    apt-get -y install libpthread-stubs0-dev

    cd /tmp

    # Configure MPI-related environment variables for VisIt
    export PAR_COMPILER="$(which mpicc)"
    export PAR_COMPILER_CXX="$(which mpicxx)"
    export PAR_INCLUDE="${OMPI_INSTALL_DIR}/include"

    # Download, build, and install VisIt
    wget "${VISIT_REPO_URL}/releases/download/v${VISIT_VERSION}/build_visit${VISIT_MAJOR}_${VISIT_MINOR}_${VISIT_REVISION}"
    chmod +x "build_visit${VISIT_MAJOR}_${VISIT_MINOR}_${VISIT_REVISION}"
    mkdir -p "${VISIT_INSTALL_DIR}/third-party"
    echo 'yes' | ./build_visit3_1_4 --parallel --system-cmake --boost --boxlib --gdal --glu --hdf4 --h5part --hdf5 --llvm --mesagl --netcdf --no-icet --silo --vtk --xdmf --prefix "${VISIT_INSTALL_DIR}" --thirdparty-path "${VISIT_INSTALL_DIR}/third-party"; echo 'yes' | ./build_visit3_1_4 --parallel --system-cmake --boost --boxlib --gdal --glu --hdf4 --h5part --hdf5 --llvm --mesagl --netcdf --no-icet --silo --vtk --xdmf --prefix "${VISIT_INSTALL_DIR}" --thirdparty-path "${VISIT_INSTALL_DIR}/third-party"

    # Remove VisIt build and source directories
    readarray -t targzs <<< "$(ls *.tar.gz)"
    for targz in "${targzs[@]}"; do
      rm -rf "$(basename ${targz} .tar.gz)"
      rm "${targz}"
    done
    readarray -t tarxzs <<< "$(ls *.tar.xz)"
    for tarxz in "${tarxzs[@]}"; do
      rm -rf "$(basename ${tarxz} .tar.xz)"
      rm "${tarxz}"
    done

    # Cleanup
    apt-get -y autoremove --purge
    apt-get -y clean

    # Update database for mlocate
    updatedb

%files

%runscript

%test
