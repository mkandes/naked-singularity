ARG OS_ARCH='linux/amd64'
ARG OS_DISTRO='ubuntu'
ARG OS_VERSION='noble'
FROM --platform="${OS_ARCH}" "${OS_DISTRO}:${OS_VERSION}"

# Add OCI annotations
LABEL org.opencontainers.image.ref.name='docker.io/mkandes/ubuntu:24.04-amd64'

LABEL org.opencontainers.image.base.name=''
LABEL org.opencontainers.image.base.digest=''

LABEL org.opencontainers.image.title='ubuntu'
LABEL org.opencontainers.image.description='Ubuntu is a Debian-based Linux operating system based on free software'
LABEL org.opencontainers.image.url='https://ubuntu.com'
LABEL org.opencontainers.image.documentation='https://ubuntu.com/server/docs'
LABEL org.opencontainers.image.source='https://launchpad.net/ubuntu/noble'
LABEL org.opencontainers.image.vendor='Canonical Ltd. https://canonical.com'
LABEL org.opencontainers.image.licenses='https://ubuntu.com/legal/intellectual-property-policy'
LABEL org.opencontainers.image.version='24.04'
LABEL org.opencontainers.image.revision='3'

LABEL org.opencontainers.image.authors='Marty Kandes (mkandes@sdsc.edu)'

# Set the default shell for the image
SHELL ["/bin/bash", "-c"]

# Set operating system mirror URL
ENV MIRRORURL='http://us.archive.ubuntu.com/ubuntu'

# Set operating system version
ENV OSVERSION='noble'

# Set system locale
ENV LC_ALL=C

# Set debian frontend interface
ENV DEBIAN_FRONTEND='noninteractive'

# Install system metapackages
RUN apt-get -y update \
 && apt-get -y install ubuntu-standard \
 && apt-get -y install ubuntu-server

# Add repositories
RUN add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} main" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} universe" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} multiverse" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} restricted"

RUN add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates main" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates universe" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates multiverse" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates restricted"

RUN add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports main" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports universe" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports multiverse" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports restricted"

RUN add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security main" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security universe" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security multiverse" \
 && add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security restricted"

# Upgrade all software packages to their latest versions
RUN apt-get -y update \
 && apt-get -y upgrade

# Install additional software packages not included in system metapackages
RUN apt-get -y install apt-utils \
 && apt-get -y install aria2 \
 && apt-get -y install autoconf \
 && apt-get -y install automake \
 && apt-get -y install build-essential \
 && apt-get -y install cmake \
 && apt-get -y install gfortran \
 && apt-get -y install lbzip2 \
 && apt-get -y install lftp \
 && apt-get -y install libtool \
 && apt-get -y install plocate \
 && apt-get -y install pigz \
 && apt-get -y install pipx \
 && apt-get -y install pkg-config \
 && apt-get -y install rclone \
 && apt-get -y install wget \
 && apt-get -y install zip

# Store information about the container image build system
RUN mkdir -p /opt/.nxis \
 && cd /opt/.nxis \
 && df -ahPT > df.default \
 && fdisk --list > fdisk.default \
 && lsblk --output-all > lsblk.default \
 && lsblk --output-all --json > lsblk.json \
 && lscpu --output-all > lscpu.default \
 && lscpu --output-all --json > lscpu.json \
 && lshw > lshw.default \
 && lshw -json > lshw.json \
 && lshw -short > lshw.short \
 && lspci > lspci.default \
 && lspci -vvv > lspci.verbose \
 && free -h > free.default \
 && cat /proc/meminfo > meminfo.default 

# Cleanup
RUN apt-get -y autoremove --purge \
 && apt-get -y clean \
 && rm -rf /var/lib/apt/lists/*

# Update database for mlocate
RUN updatedb
