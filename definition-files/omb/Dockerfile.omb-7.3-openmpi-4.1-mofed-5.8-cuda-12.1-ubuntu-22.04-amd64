FROM docker.io/mkandes/openmpi:4.1-mofed-5.8-cuda-12.1-ubuntu-22.04-amd64

# Add OCI annotations
LABEL org.opencontainers.image.ref.name='docker.io/mkandes/omb:7.3-openmpi-4.1-mofed-5.8-cuda-12.1-ubuntu-22.04-amd64'

LABEL org.opencontainers.image.base.name='docker.io/mkandes/openmpi:4.1-mofed-5.8-cuda-12.1-ubuntu-22.04-amd64'
LABEL org.opencontainers.image.base.digest='sha256:1b3276081b2257c0bdd2e013c5094073dc83e525c7948c466093c6db492aac7d'

LABEL org.opencontainers.image.title='omb'
LABEL org.opencontainers.image.description='OSU Micro-Benchmarks (OMB) measure the performance of different MPI operations'
LABEL org.opencontainers.image.url='https://mvapich.cse.ohio-state.edu/benchmarks'
LABEL org.opencontainers.image.documentation='https://mvapich.cse.ohio-state.edu/static/media/mvapich/mvapich2-userguide.html#x1-1060007'
LABEL org.opencontainers.image.source='https://mvapich.cse.ohio-state.edu/download/mvapich/osu-micro-benchmarks-7.3.tar.gz'
LABEL org.opencontainers.image.vendor='Network-Based Computing Laboratory (NBCL), Ohio State Univeristy'
LABEL org.opencontainers.image.licenses='https://mvapich.cse.ohio-state.edu/static/media/mvapich/LICENSE-OMB.txt'
LABEL org.opencontainers.image.version='7.3'
LABEL org.opencontainers.image.revision='8fa25b8aaa34e4b07ab3a4f30b7690ab46b038b08d204a853a9b6aa7bdb02f2f'

LABEL org.opencontainers.image.authors='Marty Kandes (mkandes@sdsc.edu)'

# Set the default shell for the image
SHELL ["/bin/bash", "-c"]

# Set operating system mirror URL
ENV MIRRORURL='http://us.archive.ubuntu.com/ubuntu'

# Set operating system version
ENV OSVERSION='jammy'

# Set system locale
ENV LC_ALL=C

# Set debian frontend interface
ENV DEBIAN_FRONTEND='noninteractive'

# Set OSU Micro-Benchmarks version and install path
ENV OMB_MAJ='7'
ENV OMB_MIN='3'
ENV OMB_REV=''
ENV OMB_VER="${OMB_MAJ}.${OMB_MIN}"
ENV OMB_ROOT_DIR='/opt/omb'
ENV OMB_INSTALL_DIR="${OMB_ROOT_DIR}/${OMB_VER}"

# Set paths to OSU Micro-Benchmarks binaries
ENV PATH="${OMB_INSTALL_DIR}/collective:${PATH}"
ENV PATH="${OMB_INSTALL_DIR}/one-sided:${PATH}"
ENV PATH="${OMB_INSTALL_DIR}/pt2pt:${PATH}"
ENV PATH="${OMB_INSTALL_DIR}/startup:${PATH}"

# Update software package index, but DO NOT upgrade all installed
# packages to their latest versions. This is done primarily to
# prevent the upgrade of NVIDIA CUDA to a newer version.
RUN apt-get -y update #&& apt-get -y upgrade

# Change working directory
WORKDIR /tmp

# Install gnuplot and imagemagick for OMB data visualization
RUN apt-get -y install gnuplot \
 && apt-get -y install imagemagick

# Install base environment for OMB Python benchmarks
RUN apt-get -y install python3-dev \
 && apt-get -y install python3-pip \
 && apt-get -y install python-is-python3

# Install additional dependencies for OMB Python benchmarks
RUN python -m pip install numpy \
 && python -m pip install cupy-cuda12x \
 && python -m pip install pycuda \
 && python -m pip install numba \
 && python -m pip install mpi4py

# Download, build, and install OSU Micro-Benchmarks
RUN wget "http://mvapich.cse.ohio-state.edu/download/mvapich/osu-micro-benchmarks-${OMB_VER}.tar.gz" \
 && tar -xf "osu-micro-benchmarks-${OMB_VER}.tar.gz" \
 && cd "osu-micro-benchmarks-${OMB_VER}" \
 && ./configure --prefix="${OMB_INSTALL_DIR}" CC='mpicc' CXX='mpicxx' --disable-openacc --enable-cuda --with-cuda="${CUDA_HOME}" --with-cuda-include="${CUDA_HOME}/include" --with-cuda-libpath="${CUDA_HOME}/lib64" --disable-ncclomb --with-nccl="${NCCL_LIB_DIR}" --with-gnuplot='/usr/bin' --with-convert='/usr/bin' \
 && make -j 4 \
 && make install \
 && cp -r python/ "${OMB_INSTALL_DIR}"

# Change working directory
WORKDIR /tmp

# Remove OMB build directory and source tarball
RUN rm -rf "osu-micro-benchmarks-${OMB_VER}" \
 && rm "osu-micro-benchmarks-${OMB_VER}.tar.gz"

# Reorganize OSU Microbenchmarks directory structure
RUN cd "${OMB_INSTALL_DIR}" \
 && mv libexec/osu-micro-benchmarks/mpi/collective ./ \
 && mv libexec/osu-micro-benchmarks/mpi/one-sided ./ \
 && mv libexec/osu-micro-benchmarks/mpi/pt2pt ./ \
 && mv libexec/osu-micro-benchmarks/mpi/startup ./ \
 && rm -rf libexec

# Store information about the container image build system
RUN mkdir -p /opt/.nxis \
 && cd /opt/.nxis \
 && df -ahPT > df.default \
 && fdisk --list > fdisk.default \
 && lsblk --output-all > lsblk.default \
 && lsblk --output-all --json > lsblk.json \
 && lscpu --output-all > lscpu.default \
 && lscpu --output-all --json > lscpu.json \
 && lshw > lshw.default \
 && lshw -json > lshw.json \
 && lshw -short > lshw.short \
 && lspci > lspci.default \
 && lspci -vvv > lspci.verbose \
 && free -h > free.default \
 && cat /proc/meminfo > meminfo.default 

# Cleanup
RUN apt-get -y autoremove --purge \
 && apt-get -y clean \
 && rm -rf /var/lib/apt/lists/*

# Update database for mlocate
RUN updatedb
