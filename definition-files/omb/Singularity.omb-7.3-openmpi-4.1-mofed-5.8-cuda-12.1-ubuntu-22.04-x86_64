Bootstrap: oras
From: ghcr.io/mkandes/openmpi:4.1-mofed-5.8-cuda-12.1-ubuntu-22.04-x86_64

%labels

    org.opencontainers.image.ref.name ghcr.io/mkandes/omb:7.3-openmpi-4.1-mofed-5.8-cuda-12.1-ubuntu-22.04-x86_64

    org.opencontainers.image.base.name ghcr.io/mkandes/openmpi:4.1-mofed-5.8-cuda-12.1-ubuntu-22.04-x86_64
    org.opencontainers.image.base.digest sha256:1dda6bba9903a2ef9ec21354d3041bbc74b640f38d60db4454ae3dacfce51245

    org.opencontainers.image.title omb
    org.opencontainers.image.description OSU Micro-Benchmarks (OMB) measure the performance of different MPI operations
    org.opencontainers.image.url https://mvapich.cse.ohio-state.edu/benchmarks
    org.opencontainers.image.documentation https://mvapich.cse.ohio-state.edu/static/media/mvapich/mvapich2-userguide.html#x1-1060007
    org.opencontainers.image.source https://mvapich.cse.ohio-state.edu/download/mvapich/osu-micro-benchmarks-7.3.tar.gz
    org.opencontainers.image.vendor Network-Based Computing Laboratory (NBCL), Ohio State Univeristy
    org.opencontainers.image.licenses https://mvapich.cse.ohio-state.edu/static/media/mvapich/LICENSE-OMB.txt
    org.opencontainers.image.version 7.3
    org.opencontainers.image.revision

    org.opencontainers.image.authors Marty Kandes (mkandes@sdsc.edu)

%setup

%environment

    # Set OSU Micro-Benchmarks version and install path
    export OMB_MAJ='7'
    export OMB_MIN='3'
    export OMB_REV=''
    export OMB_VER="${OMB_MAJ}.${OMB_MIN}"
    export OMB_ROOT_DIR='/opt/omb'
    export OMB_INSTALL_DIR="${OMB_ROOT_DIR}/${OMB_VER}"

    # Set paths to OSU Micro-Benchmarks binaries
    export PATH="${OMB_INSTALL_DIR}/collective:${PATH}"
    export PATH="${OMB_INSTALL_DIR}/one-sided:${PATH}"
    export PATH="${OMB_INSTALL_DIR}/pt2pt:${PATH}"
    export PATH="${OMB_INSTALL_DIR}/startup:${PATH}"

%post -c /bin/bash

    # Set operating system mirror URL
    export MIRRORURL='http://us.archive.ubuntu.com/ubuntu'

    # Set operating system version
    export OSVERSION='jammy'

    # Set system locale
    export LC_ALL=C

    # Set debian frontend interface
    export DEBIAN_FRONTEND='noninteractive'

    # Set NVIDIA driver and CUDA versions
    export NV_DRIVER_MAJ='525'
    export NV_DRIVER_MIN='85'
    export NV_DRIVER_REV='12'
    export NV_DRIVER_VER="${NV_DRIVER_MAJ}.${NV_DRIVER_MIN}.${NV_DRIVER_REV}"

    export CUDA_MAJ='12'
    export CUDA_MIN='1'
    export CUDA_REV='1'
    export CUDA_VER="${CUDA_MAJ}.${CUDA_MIN}.${CUDA_REV}"

    export CUDNN_MAJ='8'
    export CUDNN_MIN='9'
    export CUDNN_REV='0.131'
    export CUDNN_VER="${CUDNN_MAJ}.${CUDNN_MIN}.${CUDNN_REV}"

    export NCCL_MAJ='2'
    export NCCL_MIN='18'
    export NCCL_REV='3'
    export NCCL_VER="${NCCL_MAJ}.${NCCL_MIN}.${NCCL_REV}"

    export TENSORRT_MAJ='8'
    export TENSORRT_MIN='6'
    export TENSORRT_REV='1.6'
    export TENSORRT_VER="${TENSORRT_MAJ}.${TENSORRT_MIN}.${TENSORRT_REV}"

    export CUTENSOR_MAJ='2'
    export CUTENSOR_MIN='0'
    export CUTENSOR_REV='0.7'
    export CUTENSOR_VER="${CUTENSOR_MAJ}.${CUTENSOR_MIN}.${CUTENSOR_REV}"

    export CUSPARSELT_MAJ='0'
    export CUSPARSELT_MIN='5'
    export CUSPARSELT_REV='2.1'
    export CUSPARSELT_VER="${CUSPARSELT_MAJ}.${CUSPARSELT_MIN}.${CUSPARSELT_REV}"

    # Set paths to CUDA binaries and libraries
    export CUDA_HOME="/usr/local/cuda-${CUDA_MAJ}.${CUDA_MIN}"
    export CUDNN_INCLUDE_DIR='/usr/include'
    export CUDNN_LIB_DIR='/usr/lib/x86_64-linux-gnu'
    export NCCL_INCLUDE_DIR='/usr/include'
    export NCCL_LIB_DIR='/usr/lib/x86_64-linux-gnu'
    export TENSORRT_INCLUDE_DIR='/usr/include'
    export TENSORRT_LIB_DIR='/usr/lib/x86_64-linux-gnu'
    export CUTENSOR_INCLUDE_DIR='/usr/include'
    export CUTENSOR_LIB_DIR='/usr/lib/x86_64-linux-gnu'
    export CUSPARSELT_INCLUDE_DIR='/usr/include'
    export CUSPARSELT_LIB_DIR='/usr/lib/x86_64-linux-gnu'
    export PATH="${CUDA_HOME}/bin${PATH:+:${PATH}}"
    export LD_LIBRARY_PATH="${CUDA_HOME}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
    export LD_LIBRARY_PATH="${CUDNN_LIB_DIR}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${NCCL_LIB_DIR}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${TENSORRT_LIB_DIR}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${CUTENSOR_LIB_DIR}:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="${CUSPARSELT_LIB_DIR}:${LD_LIBRARY_PATH}"

    # Set Mellanox OFED version, operating system, and platform architecture
    export MOFED_MAJ='5'
    export MOFED_MIN='8'
    export MOFED_REV='2.0.3.0'
    export MOFED_VER="${MOFED_MAJ}.${MOFED_MIN}-${MOFED_REV}"
    export MOFED_OS='ubuntu22.04'
    export MOFED_ARCH='x86_64'

    # Set paths to additional Mellanox OFED binaries and libraries
    export PATH="/opt/mellanox/hcoll/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/mellanox/hcoll/lib:${LD_LIBRARY_PATH}"
    export PATH="/opt/mellanox/sharp/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/mellanox/sharp/lib:${LD_LIBRARY_PATH}"

    # Set OpenMPI version and install path
    export OPENMPI_MAJ='4'
    export OPENMPI_MIN='1'
    export OPENMPI_REV='6'
    export OPENMPI_VER="${OPENMPI_MAJ}.${OPENMPI_MIN}.${OPENMPI_REV}"
    export OPENMPI_ROOT_DIR='/opt/openmpi'
    export OPENMPI_INSTALL_DIR="${OPENMPI_ROOT_DIR}/${OPENMPI_VER}"

    # Set paths to OpenMPI binaries and libraries
    export PATH="${OPENMPI_INSTALL_DIR}/bin:${PATH}"
    export LD_LIBRARY_PATH="${OPENMPI_INSTALL_DIR}/lib:${LD_LIBRARY_PATH}"

    # DO NOT Upgrade all software packages to their latest versions
    #apt-get -y update && apt-get -y upgrade

    cd /tmp

    # Set OSU Micro-Benchmarks version and install path
    export OMB_MAJ='7'
    export OMB_MIN='3'
    export OMB_REV=''
    export OMB_VER="${OMB_MAJ}.${OMB_MIN}"
    export OMB_ROOT_DIR='/opt/omb'
    export OMB_INSTALL_DIR="${OMB_ROOT_DIR}/${OMB_VER}"

    # Install additional dependencies for OMBs Python-based benchmarks
    apt-get -y install gnuplot
    apt-get -y install imagemagick
    apt-get -y install python3-dev
    apt-get -y install python3-pip
    apt-get -y install python-is-python3
    apt-get -y install python3-numpy
    apt-get -y install python3-numba
    python -m pip install mpi4py

    # Download, build, and install OSU Microbenchmarks
    wget "http://mvapich.cse.ohio-state.edu/download/mvapich/osu-micro-benchmarks-${OMB_VER}.tar.gz"
    tar -xf "osu-micro-benchmarks-${OMB_VER}.tar.gz"
    cd "osu-micro-benchmarks-${OMB_VER}"
    ./configure --prefix="${OMB_INSTALL_DIR}" CC='mpicc' CXX='mpicxx' --enable-openacc --enable-cuda --with-cuda="${CUDA_HOME}" --with-cuda-include="${CUDA_HOME}/include" --with-cuda-libpath="${CUDA_HOME}/lib64" --enable-ncclomb --with-nccl="${NCCL_LIB}" --with-gnuplot='/usr/bin' --with-convert='/usr/bin'
    make -j 4
    make install
    cp -r python/ "${OMB_INSTALL_DIR}"

    cd "${OMB_INSTALL_DIR}"

    # Reorganize OSU Microbenchmarks directory structure
    mv libexec/osu-micro-benchmarks/mpi/collective ./
    mv libexec/osu-micro-benchmarks/mpi/one-sided ./
    mv libexec/osu-micro-benchmarks/mpi/pt2pt ./
    mv libexec/osu-micro-benchmarks/mpi/startup ./
    rm -rf libexec

    cd /tmp

    # Remove OMB build directory and source tarball
    rm -rf "osu-micro-benchmarks-${OMB_VER}"
    rm "osu-micro-benchmarks-${OMB_VER}.tar.gz"

    # Store information about the container image build system
    lscpu > /opt/lscpu.txt

    # Cleanup
    apt-get -y autoremove --purge
    apt-get -y clean

    # Update database for mlocate
    updatedb

%files

%runscript

%test
